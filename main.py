# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys

import cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QGraphicsPixmapItem, QGraphicsScene


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.path = ''
        self.savepath = ''
        self.device = 'cpu'
        self.model = 'yolov5s.pt'
        self.setupUi(self)
        self.retranslateUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView.sizePolicy().hasHeightForWidth())
        self.graphicsView.setSizePolicy(sizePolicy)
        self.graphicsView.setDragMode(QtWidgets.QGraphicsView.NoDrag)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 1, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 706, 22))
        self.menubar.setObjectName("menubar")
        self.menuMain = QtWidgets.QMenu(self.menubar)
        self.menuMain.setObjectName("menuMain")
        self.menuSetting = QtWidgets.QMenu(self.menubar)
        self.menuSetting.setObjectName("menuSetting")
        self.menuDevice = QtWidgets.QMenu(self.menuSetting)
        self.menuDevice.setObjectName("menuDevice")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setCheckable(False)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionModel = QtWidgets.QAction(MainWindow)
        self.actionModel.setObjectName("actionModel")
        self.actionCPU = QtWidgets.QAction(MainWindow)
        self.actionCPU.setCheckable(True)
        self.actionCPU.setChecked(True)
        self.actionCPU.setObjectName("actionCPU")
        self.actionGPU = QtWidgets.QAction(MainWindow)
        self.actionGPU.setCheckable(True)
        self.actionGPU.setObjectName("actionGPU")
        self.actionOpen_folder = QtWidgets.QAction(MainWindow)
        self.actionOpen_folder.setObjectName("actionOpen_folder")
        self.actionOpen_video = QtWidgets.QAction(MainWindow)
        self.actionOpen_video.setObjectName("actionOpen_video")
        self.actionTerminal = QtWidgets.QAction(MainWindow)
        self.actionTerminal.setObjectName("actionTerminal")
        self.menuMain.addAction(self.actionOpen_folder)
        self.menuMain.addAction(self.actionOpen)
        self.menuMain.addAction(self.actionOpen_video)
        self.menuMain.addAction(self.actionSave)
        self.menuMain.addSeparator()
        self.menuMain.addAction(self.actionExit)
        self.menuDevice.addAction(self.actionCPU)
        self.menuDevice.addAction(self.actionGPU)
        self.menuSetting.addAction(self.actionModel)
        self.menuSetting.addAction(self.menuDevice.menuAction())
        self.menuTools.addAction(self.actionTerminal)
        self.menubar.addAction(self.menuMain.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.actionOpen.triggered.connect(self.open_img)
        self.actionOpen_video.triggered.connect(self.open_video)
        self.actionOpen_folder.triggered.connect(self.open_folder)
        self.pushButton.clicked.connect(self.run)
        self.actionCPU.triggered.connect(self.setCPU)
        self.actionGPU.triggered.connect(self.setGPU)
        self.actionTerminal.triggered.connect(self.openTerminal)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Run"))
        self.menuMain.setTitle(_translate("MainWindow", "File"))
        self.menuSetting.setTitle(_translate("MainWindow", "Setting"))
        self.menuDevice.setTitle(_translate("MainWindow", "Device"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.actionOpen.setText(_translate("MainWindow", "Open image"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionModel.setText(_translate("MainWindow", "Model"))
        self.actionCPU.setText(_translate("MainWindow", "CPU"))
        self.actionGPU.setText(_translate("MainWindow", "GPU"))
        self.actionOpen_folder.setText(_translate("MainWindow", "Open folder"))
        self.actionOpen_video.setText(_translate("MainWindow", "Open video"))
        self.actionTerminal.setText(_translate("MainWindow", "Terminal"))

    def open_img(self):
        self.img_thread = Open_img(self)
        self.img_thread.start()

    def open_video(self):
        self.video_thread = Open_video(self)
        self.video_thread.start()

    def open_folder(self):
        self.folder_thread = Open_folder(self)
        self.folder_thread.start()

    def run(self):
        self.run_thread = Run(self)
        self.run_thread.start()

    def setCPU(self):
        self.cpu_thread = Set_cpu(self)
        self.cpu_thread.start()

    def setGPU(self):
        self.gpu_thread = Set_gpu(self)
        self.gpu_thread.start()

    def openTerminal(self):
        self.terminal_thread = Open_terminal(self)
        self.terminal_thread.start()


class Run(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        self.main_window.savepath = QFileDialog.getExistingDirectory(self.main_window,
                                                                     'Choose a folder to save the result')
        command = 'python3 detect.py --source ' + self.main_window.path + ' --project ' + self.main_window.savepath + ' --device ' + self.main_window.device
        print(command)
        os.system(command)
        # if (file_name[0] == ""):
        #     QMessageBox.information(self, "提示", self.tr("没有选择图片文件！"))
        img = cv2.imread(self.main_window.savepath + '/bus.jpg')  # 读取图像
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 转换图像通道
        img_x = img.shape[1]  # 获取图像大小
        img_y = img.shape[0]
        # x = 0
        # y = 0
        ratio = img_x / img_y
        window_x = self.main_window.graphicsView.width()
        window_y = self.main_window.graphicsView.height()
        if ratio * window_y <= window_x:
            x = int(ratio * (window_y - 20))
            y = window_y - 20
        else:
            x = window_x - 20
            y = int((window_x - 20) / ratio)
        print("resize")
        img = cv2.resize(img, (x, y))
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.main_window.item = QGraphicsPixmapItem(pix)  # 创建像素图元
        # self.item.setScale(self.zoomscale)
        self.main_window.scene = QGraphicsScene()  # 创建场景
        self.main_window.scene.addItem(self.main_window.item)
        self.main_window.graphicsView.setScene(self.main_window.scene)  # 将场景添加至视图


class Open_img(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        file_name = QFileDialog.getOpenFileName(self.main_window, 'Choose file', './', 'image(*.jpg , *.png)')
        image_path = file_name[0]
        # if (file_name[0] == ""):
        #     QMessageBox.information(self, "提示", self.tr("没有选择图片文件！"))
        print(image_path)
        self.main_window.path = image_path
        img = cv2.imread(image_path)  # 读取图像
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # 转换图像通道
        img_x = img.shape[1]  # 获取图像大小
        img_y = img.shape[0]
        ratio = img_x / img_y
        window_x = self.main_window.graphicsView.width()
        window_y = self.main_window.graphicsView.height()
        if ratio * window_y <= window_x:
            x = int(ratio * (window_y - 20))
            y = window_y - 20
        else:
            x = window_x - 20
            y = int((window_x - 20) / ratio)
        print("resize")
        img = cv2.resize(img, (x, y))
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.main_window.item = QGraphicsPixmapItem(pix)  # 创建像素图元
        # self.item.setScale(self.zoomscale)
        self.main_window.scene = QGraphicsScene()  # 创建场景
        self.main_window.scene.addItem(self.main_window.item)
        self.main_window.graphicsView.setScene(self.main_window.scene)  # 将场景添加至视图


class Open_folder(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        self.main_window.path = QFileDialog.getExistingDirectory(self.main_window, 'Choose folder')
        # TODO: 检查文件夹内文件类型，只能接受视频和图片
        print(self.main_window.path)


class Open_video(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        file_name = QFileDialog.getOpenFileName(self.main_window, 'Choose file', './', 'video(*.mp4)')
        self.main_window.path = file_name[0]
        # if (file_name[0] == ""):
        #     QMessageBox.information(self, "提示", self.tr("没有选择图片文件！"))
        print(self.main_window.path)


class Set_gpu(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        self.main_window.device = '0'
        self.main_window.actionCPU.setChecked(False)


class Set_cpu(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        self.main_window.device = 'CPU'
        self.main_window.actionGPU.setChecked(False)


class Open_terminal(QThread):
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window

    def run(self):
        return


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ObjectDetection = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(ObjectDetection)
    ObjectDetection.show()
    sys.exit(app.exec_())
